#!/bin/bash
# makemp3
VERSION="1.0"
unset DEPENDENCIES
DEPENDENCIES=(ffmpeg normalize)
SUFFIX=""
EXTENSION="mp3"
RELATIVEPATH="access/mp3"

SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "This application will create an mp3 file from a video file or package input with the following options. By default the output will be written to ${OUTPUTDIR}. You can override this with the -o option."
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename "${0}") [ -o /directory/to/write/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -o directory ( directory to write the resulting file to )"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && _usage
_check_dependencies "${DEPENDENCIES[@]}"

_cleanup(){
    _log -a "Process aborted"
    exit 1
}

trap _cleanup SIGHUP SIGINT SIGTERM

user_input="${*}"
OPTIND=1
while getopts ":ho:" OPT; do
    case "${OPT}" in
        h) _usage ;;
        o)             OUTPUTDIR="${OPTARG}"
            if [ ! -d "${OUTPUTDIR}" ] ; then
                _report -wt "The output directory option, ${OUTPUTDIR}, does not refer to an actual directory. Quitting."
                _writeerrorlog "makemp3" "The directory specified for the output does not refer to an actual directory, forcing the script to quit."
                exit 1
            fi
            ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; _writeerrorlog "makemp3" "The option selected required an argument and none was provided. The script had to exit." ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "${*}" != "" ] ; do
    INPUT="${1}"
    shift
    if [ -z "${OUTPUTDIR}" ] ; then
        [ -d "${INPUT}" ] && { OUTPUTDIR="${INPUT}/objects/${RELATIVEPATH}" && LOGDIR="${INPUT}/metadata/logs" ;};
        [ -f "${INPUT}" ] && { OUTPUTDIR=$(dirname "${INPUT}")"/${RELATIVEPATH}" && LOGDIR="$(dirname "${INPUT}")/${RELATIVEPATH}/logs" ;};
        [ ! "${OUTPUTDIR}" ] && { OUTPUTDIR="${INPUT}/objects/${RELATIVEPATH}" && LOGDIR="${INPUT}/metadata/logs" ;};
    else
        LOGDIR="${OUTPUTDIR}/logs"
    fi

    _unset_variables
    _find_input "${INPUT}"

    FILENAME=$(basename "${SOURCEFILE}")
    MEDIAID=$(basename "${INPUT}" | cut -d. -f1)
    _report_to_db

    _log -b

    _set_up_output

    INPUTOPTIONS+=(-nostdin)
    MIDDLEOPTIONS+=(-map 0:a:0)
    MIDDLEOPTIONS+=(-ac 2)
    MIDDLEOPTIONS+=(-r:a 44100)
    MIDDLEOPTIONS+=(-sample_fmt s16p)
    _get_audio_mapping "${SOURCEFILE}"
    MIDDLEOPTIONS+=("${AUDIOMAPPING_FFMPEG[@]}")

    if [ "${LOGDIR}" != "" ] ; then
        mkdir -p "${LOGDIR}"
        export FFREPORT="file=${LOGDIR}/%p_%t_$(basename "${0}")_${VERSION}.txt"
        INPUTOPTIONS+=(-v warning -stats)
    fi
    _report -dt "Working on $(basename "${OUTPUT}")."
    _run_critical_event ffmpeg "${INPUTOPTIONS[@]}" "${FFMPEGINPUT[@]}" "${MIDDLEOPTIONS[@]}" "${OUTPUT}"

    echo
    _report -dt "$(basename "${OUTPUT}") is done."
    _log -e
done
